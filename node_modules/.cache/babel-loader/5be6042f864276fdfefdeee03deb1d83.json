{"ast":null,"code":"export const testData = {\n  nodes: [{\n    id: 'Harry',\n    x: 100,\n    y: 100\n  }, {\n    id: 'Sally',\n    x: 200,\n    y: 100\n  }, {\n    id: 'Alice',\n    x: 200,\n    y: 200\n  }],\n  links: [{\n    source: 'Harry',\n    target: 'Sally'\n  }, {\n    source: 'Harry',\n    target: 'Alice'\n  }]\n};\nexport var testSOCData = {\n  // nodes: [{ id: 'Admission', x:50, y:200, name: 'Admission', equivalent: [] },\n  //         { id: 'CS1101S', x:200, y:100, name: 'Programming Methodology', equivalent: ['CS1101S', 'CS1010', 'CS1010S', 'CS1010E', 'CS1010J'] },\n  //         { id: 'CS1231', x:200, y:200, name: 'Discrete Structures', equivalent: ['MA1100'] },\n  //         { id: 'CS2030', x:350, y:50, name: 'Programming Methodology', equivalent: [] },\n  //         { id: 'CS2040', x:350, y:150, name: 'Data Structures & Algorithm', equivalent: ['CS2040', 'CS2040X'] },\n  //         { id: 'CS2100', x:350, y:250, name: 'Computer Organisaiton', equivalent: []} ,\n  //         { id: 'CS2103', x:500, y:100, name: 'Software Engineering', equivalent: [] },\n  //         { id: 'CS2105', x:500, y:200, name: 'Introduction to Computer Network', equivalent: [] },\n  //         { id: 'CS2106', x:500, y:300, name: 'Introduction to Operating Systems', equivalent: [] },\n  //         { id: 'CS3230', x:650, y:150, name: 'Design and Analysis of Algorithms', equivalent: [] },\n  //         { id: 'MA1101R', x:200, y:300, name: 'Linear Algebra', equivalent: [] },\n  nodes: [{\n    id: 'CS1101S',\n    x: 200,\n    y: 100,\n    name: 'Programming Methodology',\n    added: [0, 0],\n    require: [],\n    equivalent: ['CS1101S', 'CS1010', 'CS1010S', 'CS1010E', 'CS1010J']\n  }, {\n    id: 'CS1231',\n    x: 350,\n    y: 350,\n    name: 'Discrete Structure',\n    added: [0, 0],\n    require: [],\n    equivalent: ['CS1231', 'MA1100']\n  }, {\n    id: 'CS2030',\n    x: 350,\n    y: 50,\n    name: 'Programming Methodology 2',\n    added: [0, 0],\n    require: [{\n      name: ['CS1101S', 'CS1010', 'CS1010S', 'CS1010E', 'CS1010J'],\n      unlocked: false\n    }],\n    equivalent: []\n  }, {\n    id: 'CS2040',\n    x: 350,\n    y: 150,\n    name: 'Data Structures & Algorithm',\n    added: [0, 0],\n    require: [{\n      name: ['CS1101S', 'CS1010', 'CS1010S', 'CS1010E', 'CS1010J'],\n      unlocked: false\n    }],\n    equivalent: ['CS2040', 'CS2040X']\n  }, {\n    id: 'CS2100',\n    x: 350,\n    y: 250,\n    name: 'Computer Organisaiton',\n    added: [0, 0],\n    require: [{\n      name: ['CS1101S', 'CS1010', 'CS1010S', 'CS1010E', 'CS1010J'],\n      unlocked: false\n    }],\n    equivalent: []\n  }, {\n    id: 'CS2103',\n    x: 500,\n    y: 100,\n    name: 'Software Engineering',\n    added: [0, 0],\n    require: [{\n      name: ['CS2030'],\n      unlocked: false\n    }, {\n      name: ['CS2040'],\n      unlocked: false\n    }],\n    equivalent: []\n  }, {\n    id: 'CS2105',\n    x: 500,\n    y: 200,\n    name: 'Introduction to Computer Network',\n    added: [0, 0],\n    require: [{\n      name: ['CS2040'],\n      unlocked: false\n    }],\n    equivalent: []\n  }, {\n    id: 'CS2106',\n    x: 500,\n    y: 300,\n    name: 'Introduction to Operating Systems',\n    added: [0, 0],\n    require: [{\n      name: ['CS2100'],\n      unlocked: false\n    }],\n    equivalent: []\n  }, {\n    id: 'CS3230',\n    x: 500,\n    y: 400,\n    name: 'Design and Analysis of Algorithms',\n    added: [0, 0],\n    require: [{\n      name: ['CS1231', 'MA1100'],\n      unlocked: false\n    }, {\n      name: ['CS2040'],\n      unlocked: false\n    }],\n    equivalent: []\n  }, {\n    id: 'MA1101R',\n    x: 200,\n    y: 200,\n    name: 'Linear Algebra',\n    added: [0, 0],\n    require: [],\n    equivalent: []\n  }],\n  links: [{\n    source: 'CS1101S',\n    target: 'CS2030'\n  }, {\n    source: 'CS1101S',\n    target: 'CS2040'\n  }, {\n    source: 'CS1101S',\n    target: 'CS2100'\n  }, {\n    source: 'CS2100',\n    target: 'CS2106'\n  }, {\n    source: 'CS2030',\n    target: 'CS2103'\n  }, {\n    source: 'CS2040',\n    target: 'CS2103'\n  }, {\n    source: 'CS2040',\n    target: 'CS2105'\n  }, {\n    source: 'CS1231',\n    target: 'CS3230'\n  }, {\n    source: 'CS2040',\n    target: 'CS3230'\n  }]\n};\nconst screenWidth = window.screen.width;\nconst screenHeight = window.screen.height;\nexport const myConfig = {\n  \"automaticRearrangeAfterDropNode\": false,\n  \"collapsible\": false,\n  \"directed\": false,\n  \"focusAnimationDuration\": 0.75,\n  \"focusZoom\": 1,\n  \"highlightDegree\": 1,\n  \"highlightOpacity\": 0.2,\n  \"linkHighlightBehavior\": false,\n  \"maxZoom\": 8,\n  \"minZoom\": 0.1,\n  \"nodeHighlightBehavior\": true,\n  \"panAndZoom\": false,\n  \"staticGraph\": true,\n  \"width\": screenWidth * 0.85,\n  \"height\": screenHeight * 0.6,\n  \"d3\": {\n    \"alphaTarget\": 0.05,\n    \"gravity\": -250,\n    \"linkLength\": 120,\n    \"linkStrength\": 2\n  },\n  \"node\": {\n    \"color\": \"orange\",\n    \"fontColor\": \"black\",\n    \"fontSize\": 12,\n    \"fontWeight\": \"bold\",\n    \"highlightColor\": \"red\",\n    \"highlightFontSize\": 12,\n    \"highlightStrokeColor\": \"SAME\",\n    \"highlightStrokeWidth\": 1.5,\n    \"labelProperty\": \"name\",\n    \"mouseCursor\": \"pointer\",\n    \"opacity\": 1,\n    \"renderLabel\": false,\n    \"size\": 800,\n    \"strokeColor\": \"none\",\n    \"strokeWidth\": 1.5\n  },\n  \"link\": {\n    \"color\": \"grey\",\n    \"fontColor\": \"black\",\n    \"fontSize\": 1,\n    \"fontWeight\": \"normal\",\n    \"highlightColor\": \"rgba(255,255,255,1)\",\n    \"highlightFontSize\": 3,\n    \"highlightFontWeight\": \"normal\",\n    \"labelProperty\": \"label\",\n    \"mouseCursor\": \"pointer\",\n    \"opacity\": 0.7,\n    \"renderLabel\": false,\n    \"semanticStrokeWidth\": false,\n    \"strokeWidth\": 1.5,\n    \"type\": \"STRAIGHT\"\n  }\n}; // ---------------------------------------------------------------------------------------------------------------------------------------------------//\n// export default class Sandbox extends React.Component {\n//     constructor(props) {\n//         super(props);\n//         const { config: configOverride, data, fullscreen } = sandboxData;\n//         const config = Object.assign(defaultConfig, configOverride);\n//         const schemaProps = utils.generateFormSchema(config, \"\", {});\n//         const schema = {\n//             type: \"object\",\n//             properties: schemaProps,\n//         };\n//         const uiSchema = {\n//             height: { \"ui:readonly\": \"true\" },\n//             width: { \"ui:readonly\": \"true\" },\n//         };\n//         this.uiSchema = uiSchema;\n//         this.state = {\n//             config,\n//             generatedConfig: {},\n//             schema,\n//             data,\n//             fullscreen,\n//         };\n//     }\n//     onClickGraph = () => console.info(\"Clicked the graph\");\n//     onClickNode = id => {\n//         !this.state.config.collapsible && window.alert(`Clicked node ${id}`);\n//         // NOTE: below sample implementation for focusAnimation when clicking on node\n//         // this.setState({\n//         //     data: {\n//         //         ...this.state.data,\n//         //         focusedNodeId: this.state.data.focusedNodeId !== id ? id : null\n//         //     }\n//         // });\n//     };\n//     onDoubleClickNode = id => {\n//         !this.state.config.collapsible && window.alert(`Double clicked node ${id}`);\n//     };\n//     onRightClickNode = (event, id) => {\n//         event.preventDefault();\n//         window.alert(`RIGHT clicked node ${id}`);\n//     };\n//     onClickLink = (source, target) => window.alert(`Clicked link between ${source} and ${target}`);\n//     onRightClickLink = (event, source, target) => {\n//         event.preventDefault();\n//         window.alert(`RIGHT clicked link between ${source} and ${target}`);\n//     };\n//     onMouseOverNode = id => console.info(`Do something when mouse is over node (${id})`);\n//     onMouseOutNode = id => console.info(`Do something when mouse is out of node (${id})`);\n//     onMouseOverLink = (source, target) =>\n//         console.info(`Do something when mouse is over link between ${source} and ${target}`);\n//     onMouseOutLink = (source, target) =>\n//         console.info(`Do something when mouse is out of link between ${source} and ${target}`);\n//     /**\n//      * Sets on/off fullscreen visualization mode.\n//      */\n//     onToggleFullScreen = () => {\n//         const fullscreen = !this.state.fullscreen;\n//         this.setState({ fullscreen });\n//     };\n//     /**\n//      * Play stopped animations.\n//      */\n//     restartGraphSimulation = () => this.refs.graph.restartSimulation();\n//     /**\n//      * Pause ongoing animations.\n//      */\n//     pauseGraphSimulation = () => this.refs.graph.pauseSimulation();\n//     /**\n//      * If you have moved nodes you will have them restore theirs positions\n//      * when you call resetNodesPositions.\n//      */\n//     resetNodesPositions = () => this.refs.graph.resetNodesPositions();\n//     /**\n//      * Append a new node with some randomness.\n//      */\n//     onClickAddNode = () => {\n//         if (this.state.data.nodes && this.state.data.nodes.length) {\n//             const maxIndex = this.state.data.nodes.length - 1;\n//             const minIndex = 0;\n//             let i = Math.floor(Math.random() * (maxIndex - minIndex + 1) + minIndex);\n//             let nLinks = Math.floor(Math.random() * (5 - minIndex + 1) + minIndex);\n//             const newNode = `Node ${this.state.data.nodes.length}`;\n//             this.state.data.nodes.push({ id: newNode });\n//             while (this.state.data.nodes[i] && this.state.data.nodes[i].id && nLinks) {\n//                 this.state.data.links.push({\n//                     source: newNode,\n//                     target: this.state.data.nodes[i].id,\n//                 });\n//                 i++;\n//                 nLinks--;\n//             }\n//             this.setState({\n//                 data: this.state.data,\n//             });\n//         } else {\n//             // 1st node\n//             const data = {\n//                 nodes: [{ id: \"Node 1\" }],\n//                 links: [],\n//             };\n//             this.setState({ data });\n//         }\n//     };\n//     /**\n//      * Remove a node.\n//      */\n//     onClickRemoveNode = () => {\n//         if (this.state.data.nodes && this.state.data.nodes.length) {\n//             const id = this.state.data.nodes[0].id;\n//             this.state.data.nodes.splice(0, 1);\n//             const links = this.state.data.links.filter(l => l.source !== id && l.target !== id);\n//             const data = { nodes: this.state.data.nodes, links };\n//             this.setState({ data });\n//         } else {\n//             window.alert(\"No more nodes to remove!\");\n//         }\n//     };\n//     _buildGraphConfig = data => {\n//         let config = {};\n//         let schemaPropsValues = {};\n//         for (let k of Object.keys(data.formData)) {\n//             // Set value mapping correctly for config object of react-d3-graph\n//             utils.setValue(config, k, data.formData[k]);\n//             // Set new values for schema of jsonform\n//             schemaPropsValues[k] = {};\n//             schemaPropsValues[k][\"default\"] = data.formData[k];\n//         }\n//         return { config, schemaPropsValues };\n//     };\n//     refreshGraph = data => {\n//         const { config, schemaPropsValues } = this._buildGraphConfig(data);\n//         this.state.schema.properties = reactD3GraphUtils.merge(this.state.schema.properties, schemaPropsValues);\n//         this.setState({\n//             config,\n//         });\n//     };\n//     /**\n//      * Generate graph configuration file ready to use!\n//      */\n//     onSubmit = data => {\n//         const { config } = this._buildGraphConfig(data);\n//         this.setState({ generatedConfig: config });\n//     };\n//     onClickSubmit = () => {\n//         // Hack for allow submit button to live outside jsonform\n//         document.body.querySelector(\".invisible-button\").click();\n//     };\n//     resetGraphConfig = () => {\n//         const generatedConfig = {};\n//         const schemaProps = utils.generateFormSchema(defaultConfig, \"\", {});\n//         const schema = {\n//             type: \"object\",\n//             properties: schemaProps,\n//         };\n//         this.setState({\n//             config: defaultConfig,\n//             generatedConfig,\n//             schema,\n//         });\n//     };\n//     /**\n//      * This function decorates nodes and links with positions. The motivation\n//      * for this function its to set `config.staticGraph` to true on the first render\n//      * call, and to get nodes and links statically set to their initial positions.\n//      * @param  {Object} nodes nodes and links with minimalist structure.\n//      * @return {Object} the graph where now nodes containing (x,y) coords.\n//      */\n//     decorateGraphNodesWithInitialPositioning = nodes => {\n//         return nodes.map(n =>\n//             Object.assign({}, n, {\n//                 x: n.x || Math.floor(Math.random() * 500),\n//                 y: n.y || Math.floor(Math.random() * 500),\n//             })\n//         );\n//     };\n//     /**\n//      * Update graph data each time an update is triggered\n//      * by JsonTree\n//      * @param {Object} data update graph data (nodes and links)\n//      */\n//     onGraphDataUpdate = data => this.setState({ data });\n//     /**\n//      * Build common piece of the interface that contains some interactions such as\n//      * fullscreen, play/pause, + and - buttons.\n//      */\n//     buildCommonInteractionsPanel = () => {\n//         const btnStyle = {\n//             cursor: this.state.config.staticGraph ? \"not-allowed\" : \"pointer\",\n//         };\n//         const fullscreen = this.state.fullscreen ? (\n//             <span className=\"cross-icon\" onClick={this.onToggleFullScreen}>\n//                 ❌\n//             </span>\n//         ) : (\n//             <button onClick={this.onToggleFullScreen} className=\"btn btn-default btn-margin-left\">\n//                 Fullscreen\n//             </button>\n//         );\n//         return (\n//             <div>\n//                 {fullscreen}\n//                 <button\n//                     onClick={this.restartGraphSimulation}\n//                     className=\"btn btn-default btn-margin-left\"\n//                     style={btnStyle}\n//                     disabled={this.state.config.staticGraph}\n//                 >\n//                     ▶️\n//                 </button>\n//                 <button\n//                     onClick={this.pauseGraphSimulation}\n//                     className=\"btn btn-default btn-margin-left\"\n//                     style={btnStyle}\n//                     disabled={this.state.config.staticGraph}\n//                 >\n//                     ⏸️\n//                 </button>\n//                 <button\n//                     onClick={this.resetNodesPositions}\n//                     className=\"btn btn-default btn-margin-left\"\n//                     style={btnStyle}\n//                     disabled={this.state.config.staticGraph}\n//                 >\n//                     Unstick nodes\n//                 </button>\n//                 <button onClick={this.onClickAddNode} className=\"btn btn-default btn-margin-left\">\n//                     +\n//                 </button>\n//                 <button onClick={this.onClickRemoveNode} className=\"btn btn-default btn-margin-left\">\n//                     -\n//                 </button>\n//                 <span className=\"container__graph-info\">\n//                     <b>Nodes: </b> {this.state.data.nodes.length} | <b>Links: </b> {this.state.data.links.length}\n//                 </span>\n//             </div>\n//         );\n//     };\n//     render() {\n//         // This does not happens in this sandbox scenario running time, but if we set staticGraph config\n//         // to true in the constructor we will provide nodes with initial positions\n//         const data = {\n//             nodes: this.decorateGraphNodesWithInitialPositioning(this.state.data.nodes),\n//             links: this.state.data.links,\n//             focusedNodeId: this.state.data.focusedNodeId,\n//         };\n//         const graphProps = {\n//             id: \"graph\",\n//             data,\n//             config: this.state.config,\n//             onClickNode: this.onClickNode,\n//             onDoubleClickNode: this.onDoubleClickNode,\n//             onRightClickNode: this.onRightClickNode,\n//             onClickGraph: this.onClickGraph,\n//             onClickLink: this.onClickLink,\n//             onRightClickLink: this.onRightClickLink,\n//             onMouseOverNode: this.onMouseOverNode,\n//             onMouseOutNode: this.onMouseOutNode,\n//             onMouseOverLink: this.onMouseOverLink,\n//             onMouseOutLink: this.onMouseOutLink,\n//         };\n//         if (this.state.fullscreen) {\n//             graphProps.config = Object.assign({}, graphProps.config, {\n//                 height: window.innerHeight,\n//                 width: window.innerWidth,\n//             });\n//             return (\n//                 <div>\n//                     {this.buildCommonInteractionsPanel()}\n//                     <Graph ref=\"graph\" {...graphProps} />\n//                 </div>\n//             );\n//         } else {\n//             // @TODO: Only show configs that differ from default ones in \"Your config\" box\n//             return (\n//                 <div className=\"container\">\n//                     <div className=\"container__graph\">\n//                         {this.buildCommonInteractionsPanel()}\n//                         <div className=\"container__graph-area\">\n//                             <Graph ref=\"graph\" {...graphProps} />\n//                         </div>\n//                     </div>\n//                     <div className=\"container__form\">\n//                         <h4>\n//                             <a href=\"https://github.com/danielcaldas/react-d3-graph\" target=\"_blank\">\n//                                 react-d3-graph\n//                             </a>\n//                         </h4>\n//                         <h4>\n//                             <a href=\"https://danielcaldas.github.io/react-d3-graph/docs/index.html\" target=\"_blank\">\n//                                 docs\n//                             </a>\n//                         </h4>\n//                         <h3>Configurations</h3>\n//                         <Form\n//                             className=\"form-wrapper\"\n//                             schema={this.state.schema}\n//                             uiSchema={this.uiSchema}\n//                             onChange={this.refreshGraph}\n//                             onSubmit={this.onSubmit}\n//                         >\n//                             <button className=\"invisible-button\" type=\"submit\" />\n//                         </Form>\n//                         <button className=\"submit-button btn btn-primary\" onClick={this.onClickSubmit}>\n//                             Generate config\n//                         </button>\n//                         <button className=\"reset-button btn btn-danger\" onClick={this.resetGraphConfig}>\n//                             Reset config\n//                         </button>\n//                     </div>\n//                     <div className=\"container__graph-config\">\n//                         <h4>Your config</h4>\n//                         <JSONContainer data={this.state.generatedConfig} staticData={false} />\n//                     </div>\n//                     <div className=\"container__graph-data\">\n//                         <h4>\n//                             Graph Data <small>(editable)</small>\n//                         </h4>\n//                         <div className=\"json-data-container\">\n//                             <JsonTree data={this.state.data} onFullyUpdate={this.onGraphDataUpdate} />\n//                         </div>\n//                     </div>\n//                 </div>\n//             );\n//         }\n//     }\n// }","map":{"version":3,"sources":["C:\\Users\\Lenovo\\Desktop\\Orbital\\Orbital-master\\src\\Components\\Planning\\Graph\\GraphConfig.js"],"names":["testData","nodes","id","x","y","links","source","target","testSOCData","name","added","require","equivalent","unlocked","screenWidth","window","screen","width","screenHeight","height","myConfig"],"mappings":"AAAA,OAAO,MAAMA,QAAQ,GAAG;AACpBC,EAAAA,KAAK,EAAE,CAAC;AAAEC,IAAAA,EAAE,EAAE,OAAN;AAAeC,IAAAA,CAAC,EAAC,GAAjB;AAAsBC,IAAAA,CAAC,EAAC;AAAxB,GAAD,EAAgC;AAAEF,IAAAA,EAAE,EAAE,OAAN;AAAeC,IAAAA,CAAC,EAAC,GAAjB;AAAsBC,IAAAA,CAAC,EAAC;AAAxB,GAAhC,EAA+D;AAAEF,IAAAA,EAAE,EAAE,OAAN;AAAeC,IAAAA,CAAC,EAAC,GAAjB;AAAsBC,IAAAA,CAAC,EAAC;AAAxB,GAA/D,CADa;AAEpBC,EAAAA,KAAK,EAAE,CAAC;AAAEC,IAAAA,MAAM,EAAE,OAAV;AAAmBC,IAAAA,MAAM,EAAE;AAA3B,GAAD,EAAuC;AAAED,IAAAA,MAAM,EAAE,OAAV;AAAmBC,IAAAA,MAAM,EAAE;AAA3B,GAAvC;AAFa,CAAjB;AAKP,OAAO,IAAIC,WAAW,GAAI;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAP,EAAAA,KAAK,EAAE,CACC;AAAEC,IAAAA,EAAE,EAAE,SAAN;AAAiBC,IAAAA,CAAC,EAAC,GAAnB;AAAwBC,IAAAA,CAAC,EAAC,GAA1B;AAA+BK,IAAAA,IAAI,EAAE,yBAArC;AAAgEC,IAAAA,KAAK,EAAE,CAAC,CAAD,EAAG,CAAH,CAAvE;AAA8EC,IAAAA,OAAO,EAAE,EAAvF;AAA2FC,IAAAA,UAAU,EAAE,CAAC,SAAD,EAAY,QAAZ,EAAsB,SAAtB,EAAiC,SAAjC,EAA4C,SAA5C;AAAvG,GADD,EAEC;AAAEV,IAAAA,EAAE,EAAE,QAAN;AAAgBC,IAAAA,CAAC,EAAC,GAAlB;AAAuBC,IAAAA,CAAC,EAAC,GAAzB;AAA8BK,IAAAA,IAAI,EAAE,oBAApC;AAA0DC,IAAAA,KAAK,EAAE,CAAC,CAAD,EAAG,CAAH,CAAjE;AAAwEC,IAAAA,OAAO,EAAE,EAAjF;AAAqFC,IAAAA,UAAU,EAAE,CAAC,QAAD,EAAW,QAAX;AAAjG,GAFD,EAGC;AAAEV,IAAAA,EAAE,EAAE,QAAN;AAAgBC,IAAAA,CAAC,EAAC,GAAlB;AAAuBC,IAAAA,CAAC,EAAC,EAAzB;AAA6BK,IAAAA,IAAI,EAAE,2BAAnC;AAAgEC,IAAAA,KAAK,EAAE,CAAC,CAAD,EAAG,CAAH,CAAvE;AAA8EC,IAAAA,OAAO,EAAE,CAAC;AAACF,MAAAA,IAAI,EAAE,CAAC,SAAD,EAAY,QAAZ,EAAsB,SAAtB,EAAiC,SAAjC,EAA4C,SAA5C,CAAP;AAA+DI,MAAAA,QAAQ,EAAE;AAAzE,KAAD,CAAvF;AAA0KD,IAAAA,UAAU,EAAE;AAAtL,GAHD,EAIC;AAAEV,IAAAA,EAAE,EAAE,QAAN;AAAgBC,IAAAA,CAAC,EAAC,GAAlB;AAAuBC,IAAAA,CAAC,EAAC,GAAzB;AAA8BK,IAAAA,IAAI,EAAE,6BAApC;AAAmEC,IAAAA,KAAK,EAAE,CAAC,CAAD,EAAG,CAAH,CAA1E;AAAiFC,IAAAA,OAAO,EAAE,CAAC;AAACF,MAAAA,IAAI,EAAE,CAAC,SAAD,EAAY,QAAZ,EAAsB,SAAtB,EAAiC,SAAjC,EAA4C,SAA5C,CAAP;AAA+DI,MAAAA,QAAQ,EAAE;AAAzE,KAAD,CAA1F;AAA6KD,IAAAA,UAAU,EAAE,CAAC,QAAD,EAAW,SAAX;AAAzL,GAJD,EAKC;AAAEV,IAAAA,EAAE,EAAE,QAAN;AAAgBC,IAAAA,CAAC,EAAC,GAAlB;AAAuBC,IAAAA,CAAC,EAAC,GAAzB;AAA8BK,IAAAA,IAAI,EAAE,uBAApC;AAA6DC,IAAAA,KAAK,EAAE,CAAC,CAAD,EAAG,CAAH,CAApE;AAA2EC,IAAAA,OAAO,EAAE,CAAC;AAACF,MAAAA,IAAI,EAAE,CAAC,SAAD,EAAY,QAAZ,EAAsB,SAAtB,EAAiC,SAAjC,EAA4C,SAA5C,CAAP;AAA+DI,MAAAA,QAAQ,EAAE;AAAzE,KAAD,CAApF;AAAuKD,IAAAA,UAAU,EAAE;AAAnL,GALD,EAMC;AAAEV,IAAAA,EAAE,EAAE,QAAN;AAAgBC,IAAAA,CAAC,EAAC,GAAlB;AAAuBC,IAAAA,CAAC,EAAC,GAAzB;AAA8BK,IAAAA,IAAI,EAAE,sBAApC;AAA4DC,IAAAA,KAAK,EAAE,CAAC,CAAD,EAAG,CAAH,CAAnE;AAA0EC,IAAAA,OAAO,EAAE,CAAC;AAACF,MAAAA,IAAI,EAAE,CAAC,QAAD,CAAP;AAAmBI,MAAAA,QAAQ,EAAE;AAA7B,KAAD,EAAsC;AAACJ,MAAAA,IAAI,EAAE,CAAC,QAAD,CAAP;AAAmBI,MAAAA,QAAQ,EAAE;AAA7B,KAAtC,CAAnF;AAA+JD,IAAAA,UAAU,EAAE;AAA3K,GAND,EAOC;AAAEV,IAAAA,EAAE,EAAE,QAAN;AAAgBC,IAAAA,CAAC,EAAC,GAAlB;AAAuBC,IAAAA,CAAC,EAAC,GAAzB;AAA8BK,IAAAA,IAAI,EAAE,kCAApC;AAAwEC,IAAAA,KAAK,EAAE,CAAC,CAAD,EAAG,CAAH,CAA/E;AAAsFC,IAAAA,OAAO,EAAE,CAAC;AAACF,MAAAA,IAAI,EAAE,CAAC,QAAD,CAAP;AAAmBI,MAAAA,QAAQ,EAAE;AAA7B,KAAD,CAA/F;AAAsID,IAAAA,UAAU,EAAE;AAAlJ,GAPD,EAQC;AAAEV,IAAAA,EAAE,EAAE,QAAN;AAAgBC,IAAAA,CAAC,EAAC,GAAlB;AAAuBC,IAAAA,CAAC,EAAC,GAAzB;AAA8BK,IAAAA,IAAI,EAAE,mCAApC;AAAyEC,IAAAA,KAAK,EAAE,CAAC,CAAD,EAAG,CAAH,CAAhF;AAAuFC,IAAAA,OAAO,EAAE,CAAC;AAACF,MAAAA,IAAI,EAAE,CAAC,QAAD,CAAP;AAAmBI,MAAAA,QAAQ,EAAE;AAA7B,KAAD,CAAhG;AAAuID,IAAAA,UAAU,EAAE;AAAnJ,GARD,EASC;AAAEV,IAAAA,EAAE,EAAE,QAAN;AAAgBC,IAAAA,CAAC,EAAC,GAAlB;AAAuBC,IAAAA,CAAC,EAAC,GAAzB;AAA8BK,IAAAA,IAAI,EAAE,mCAApC;AAAyEC,IAAAA,KAAK,EAAE,CAAC,CAAD,EAAG,CAAH,CAAhF;AAAuFC,IAAAA,OAAO,EAAE,CAAC;AAACF,MAAAA,IAAI,EAAE,CAAC,QAAD,EAAW,QAAX,CAAP;AAA6BI,MAAAA,QAAQ,EAAE;AAAvC,KAAD,EAAgD;AAACJ,MAAAA,IAAI,EAAC,CAAC,QAAD,CAAN;AAAkBI,MAAAA,QAAQ,EAAE;AAA5B,KAAhD,CAAhG;AAAqLD,IAAAA,UAAU,EAAE;AAAjM,GATD,EAUC;AAAEV,IAAAA,EAAE,EAAE,SAAN;AAAiBC,IAAAA,CAAC,EAAC,GAAnB;AAAwBC,IAAAA,CAAC,EAAC,GAA1B;AAA+BK,IAAAA,IAAI,EAAE,gBAArC;AAAuDC,IAAAA,KAAK,EAAE,CAAC,CAAD,EAAG,CAAH,CAA9D;AAAqEC,IAAAA,OAAO,EAAE,EAA9E;AAAkFC,IAAAA,UAAU,EAAE;AAA9F,GAVD,CAZe;AAwBtBP,EAAAA,KAAK,EAAE,CACC;AAAEC,IAAAA,MAAM,EAAE,SAAV;AAAqBC,IAAAA,MAAM,EAAE;AAA7B,GADD,EAEC;AAAED,IAAAA,MAAM,EAAE,SAAV;AAAqBC,IAAAA,MAAM,EAAE;AAA7B,GAFD,EAGC;AAAED,IAAAA,MAAM,EAAE,SAAV;AAAqBC,IAAAA,MAAM,EAAE;AAA7B,GAHD,EAIC;AAAED,IAAAA,MAAM,EAAE,QAAV;AAAoBC,IAAAA,MAAM,EAAE;AAA5B,GAJD,EAKC;AAAED,IAAAA,MAAM,EAAE,QAAV;AAAoBC,IAAAA,MAAM,EAAE;AAA5B,GALD,EAMC;AAAED,IAAAA,MAAM,EAAE,QAAV;AAAoBC,IAAAA,MAAM,EAAE;AAA5B,GAND,EAOC;AAAED,IAAAA,MAAM,EAAE,QAAV;AAAoBC,IAAAA,MAAM,EAAE;AAA5B,GAPD,EAQC;AAAED,IAAAA,MAAM,EAAE,QAAV;AAAoBC,IAAAA,MAAM,EAAE;AAA5B,GARD,EASC;AAAED,IAAAA,MAAM,EAAE,QAAV;AAAoBC,IAAAA,MAAM,EAAE;AAA5B,GATD;AAxBe,CAAnB;AAqCP,MAAMO,WAAW,GAAGC,MAAM,CAACC,MAAP,CAAcC,KAAlC;AACA,MAAMC,YAAY,GAAGH,MAAM,CAACC,MAAP,CAAcG,MAAnC;AAEA,OAAO,MAAMC,QAAQ,GAAG;AACpB,qCAAmC,KADf;AAEpB,iBAAe,KAFK;AAGpB,cAAY,KAHQ;AAIpB,4BAA0B,IAJN;AAKpB,eAAa,CALO;AAMpB,qBAAmB,CANC;AAOpB,sBAAoB,GAPA;AAQpB,2BAAyB,KARL;AASpB,aAAW,CATS;AAUpB,aAAW,GAVS;AAWpB,2BAAyB,IAXL;AAYpB,gBAAc,KAZM;AAapB,iBAAe,IAbK;AAcpB,WAASN,WAAW,GAAC,IAdD;AAepB,YAAUI,YAAY,GAAC,GAfH;AAgBpB,QAAM;AACJ,mBAAe,IADX;AAEJ,eAAW,CAAC,GAFR;AAGJ,kBAAc,GAHV;AAIJ,oBAAgB;AAJZ,GAhBc;AAsBpB,UAAQ;AACN,aAAS,QADH;AAEN,iBAAa,OAFP;AAGN,gBAAY,EAHN;AAIN,kBAAc,MAJR;AAKN,sBAAkB,KALZ;AAMN,yBAAqB,EANf;AAON,4BAAwB,MAPlB;AAQN,4BAAwB,GARlB;AASN,qBAAiB,MATX;AAUN,mBAAe,SAVT;AAWN,eAAW,CAXL;AAYN,mBAAe,KAZT;AAaN,YAAQ,GAbF;AAcN,mBAAe,MAdT;AAeN,mBAAe;AAfT,GAtBY;AAuCpB,UAAQ;AACN,aAAS,MADH;AAEN,iBAAa,OAFP;AAGN,gBAAY,CAHN;AAIN,kBAAc,QAJR;AAKN,sBAAkB,qBALZ;AAMN,yBAAqB,CANf;AAON,2BAAuB,QAPjB;AAQN,qBAAiB,OARX;AASN,mBAAe,SATT;AAUN,eAAW,GAVL;AAWN,mBAAe,KAXT;AAYN,2BAAuB,KAZjB;AAaN,mBAAe,GAbT;AAcN,YAAQ;AAdF;AAvCY,CAAjB,C,CAwsourcesContent":["export const testData = {\n    nodes: [{ id: 'Harry', x:100, y:100 }, { id: 'Sally', x:200, y:100 }, { id: 'Alice', x:200, y:200 }],\n    links: [{ source: 'Harry', target: 'Sally' }, { source: 'Harry', target: 'Alice' }]\n};\n\nexport var testSOCData =  {\n    // nodes: [{ id: 'Admission', x:50, y:200, name: 'Admission', equivalent: [] },\n    //         { id: 'CS1101S', x:200, y:100, name: 'Programming Methodology', equivalent: ['CS1101S', 'CS1010', 'CS1010S', 'CS1010E', 'CS1010J'] },\n    //         { id: 'CS1231', x:200, y:200, name: 'Discrete Structures', equivalent: ['MA1100'] },\n    //         { id: 'CS2030', x:350, y:50, name: 'Programming Methodology', equivalent: [] },\n    //         { id: 'CS2040', x:350, y:150, name: 'Data Structures & Algorithm', equivalent: ['CS2040', 'CS2040X'] },\n    //         { id: 'CS2100', x:350, y:250, name: 'Computer Organisaiton', equivalent: []} ,\n    //         { id: 'CS2103', x:500, y:100, name: 'Software Engineering', equivalent: [] },\n    //         { id: 'CS2105', x:500, y:200, name: 'Introduction to Computer Network', equivalent: [] },\n    //         { id: 'CS2106', x:500, y:300, name: 'Introduction to Operating Systems', equivalent: [] },\n    //         { id: 'CS3230', x:650, y:150, name: 'Design and Analysis of Algorithms', equivalent: [] },\n    //         { id: 'MA1101R', x:200, y:300, name: 'Linear Algebra', equivalent: [] },\n    nodes: [\n            { id: 'CS1101S', x:200, y:100, name: 'Programming Methodology', added: [0,0], require: [], equivalent: ['CS1101S', 'CS1010', 'CS1010S', 'CS1010E', 'CS1010J'] },\n            { id: 'CS1231', x:350, y:350, name: 'Discrete Structure', added: [0,0], require: [], equivalent: ['CS1231', 'MA1100'] },\n            { id: 'CS2030', x:350, y:50, name: 'Programming Methodology 2', added: [0,0], require: [{name: ['CS1101S', 'CS1010', 'CS1010S', 'CS1010E', 'CS1010J'], unlocked: false}], equivalent: [] },\n            { id: 'CS2040', x:350, y:150, name: 'Data Structures & Algorithm', added: [0,0], require: [{name: ['CS1101S', 'CS1010', 'CS1010S', 'CS1010E', 'CS1010J'], unlocked: false}], equivalent: ['CS2040', 'CS2040X'] },\n            { id: 'CS2100', x:350, y:250, name: 'Computer Organisaiton', added: [0,0], require: [{name: ['CS1101S', 'CS1010', 'CS1010S', 'CS1010E', 'CS1010J'], unlocked: false}], equivalent: []} ,\n            { id: 'CS2103', x:500, y:100, name: 'Software Engineering', added: [0,0], require: [{name: ['CS2030'], unlocked: false}, {name: ['CS2040'], unlocked: false}], equivalent: [] },\n            { id: 'CS2105', x:500, y:200, name: 'Introduction to Computer Network', added: [0,0], require: [{name: ['CS2040'], unlocked: false}], equivalent: [] },\n            { id: 'CS2106', x:500, y:300, name: 'Introduction to Operating Systems', added: [0,0], require: [{name: ['CS2100'], unlocked: false}], equivalent: [] },\n            { id: 'CS3230', x:500, y:400, name: 'Design and Analysis of Algorithms', added: [0,0], require: [{name: ['CS1231', 'MA1100'], unlocked: false}, {name:['CS2040'], unlocked: false}], equivalent: [] },\n            { id: 'MA1101R', x:200, y:200, name: 'Linear Algebra', added: [0,0], require: [], equivalent: [] },\n          ],\n    links: [\n            { source: 'CS1101S', target: 'CS2030' }, \n            { source: 'CS1101S', target: 'CS2040' },\n            { source: 'CS1101S', target: 'CS2100' },\n            { source: 'CS2100', target: 'CS2106' },\n            { source: 'CS2030', target: 'CS2103' },\n            { source: 'CS2040', target: 'CS2103' },\n            { source: 'CS2040', target: 'CS2105' },\n            { source: 'CS1231', target: 'CS3230' },\n            { source: 'CS2040', target: 'CS3230'}\n          ]\n  };\n\nconst screenWidth = window.screen.width;\nconst screenHeight = window.screen.height;\n\nexport const myConfig = {\n    \"automaticRearrangeAfterDropNode\": false,\n    \"collapsible\": false,\n    \"directed\": false,\n    \"focusAnimationDuration\": 0.75,\n    \"focusZoom\": 1,\n    \"highlightDegree\": 1,\n    \"highlightOpacity\": 0.2,\n    \"linkHighlightBehavior\": false,\n    \"maxZoom\": 8,\n    \"minZoom\": 0.1,\n    \"nodeHighlightBehavior\": true,\n    \"panAndZoom\": false,\n    \"staticGraph\": true,\n    \"width\": screenWidth*0.85,\n    \"height\": screenHeight*0.6,\n    \"d3\": {\n      \"alphaTarget\": 0.05,\n      \"gravity\": -250,\n      \"linkLength\": 120,\n      \"linkStrength\": 2\n    },\n    \"node\": {\n      \"color\": \"orange\",\n      \"fontColor\": \"black\",\n      \"fontSize\": 12,\n      \"fontWeight\": \"bold\",\n      \"highlightColor\": \"red\",\n      \"highlightFontSize\": 12,\n      \"highlightStrokeColor\": \"SAME\",\n      \"highlightStrokeWidth\": 1.5,\n      \"labelProperty\": \"name\",\n      \"mouseCursor\": \"pointer\",\n      \"opacity\": 1,\n      \"renderLabel\": false,\n      \"size\": 800,\n      \"strokeColor\": \"none\",\n      \"strokeWidth\": 1.5,\n    },\n    \"link\": {\n      \"color\": \"grey\",\n      \"fontColor\": \"black\",\n      \"fontSize\": 1,\n      \"fontWeight\": \"normal\",\n      \"highlightColor\": \"rgba(255,255,255,1)\",\n      \"highlightFontSize\": 3,\n      \"highlightFontWeight\": \"normal\",\n      \"labelProperty\": \"label\",\n      \"mouseCursor\": \"pointer\",\n      \"opacity\": 0.7,\n      \"renderLabel\": false,\n      \"semanticStrokeWidth\": false,\n      \"strokeWidth\": 1.5,\n      \"type\": \"STRAIGHT\"\n    }\n  };\n// ---------------------------------------------------------------------------------------------------------------------------------------------------//\n\n// export default class Sandbox extends React.Component {\n//     constructor(props) {\n//         super(props);\n\n//         const { config: configOverride, data, fullscreen } = sandboxData;\n//         const config = Object.assign(defaultConfig, configOverride);\n//         const schemaProps = utils.generateFormSchema(config, \"\", {});\n\n//         const schema = {\n//             type: \"object\",\n//             properties: schemaProps,\n//         };\n\n//         const uiSchema = {\n//             height: { \"ui:readonly\": \"true\" },\n//             width: { \"ui:readonly\": \"true\" },\n//         };\n\n//         this.uiSchema = uiSchema;\n\n//         this.state = {\n//             config,\n//             generatedConfig: {},\n//             schema,\n//             data,\n//             fullscreen,\n//         };\n//     }\n\n//     onClickGraph = () => console.info(\"Clicked the graph\");\n\n//     onClickNode = id => {\n//         !this.state.config.collapsible && window.alert(`Clicked node ${id}`);\n//         // NOTE: below sample implementation for focusAnimation when clicking on node\n//         // this.setState({\n//         //     data: {\n//         //         ...this.state.data,\n//         //         focusedNodeId: this.state.data.focusedNodeId !== id ? id : null\n//         //     }\n//         // });\n//     };\n\n//     onDoubleClickNode = id => {\n//         !this.state.config.collapsible && window.alert(`Double clicked node ${id}`);\n//     };\n\n//     onRightClickNode = (event, id) => {\n//         event.preventDefault();\n//         window.alert(`RIGHT clicked node ${id}`);\n//     };\n\n//     onClickLink = (source, target) => window.alert(`Clicked link between ${source} and ${target}`);\n\n//     onRightClickLink = (event, source, target) => {\n//         event.preventDefault();\n//         window.alert(`RIGHT clicked link between ${source} and ${target}`);\n//     };\n\n//     onMouseOverNode = id => console.info(`Do something when mouse is over node (${id})`);\n\n//     onMouseOutNode = id => console.info(`Do something when mouse is out of node (${id})`);\n\n//     onMouseOverLink = (source, target) =>\n//         console.info(`Do something when mouse is over link between ${source} and ${target}`);\n\n//     onMouseOutLink = (source, target) =>\n//         console.info(`Do something when mouse is out of link between ${source} and ${target}`);\n\n//     /**\n//      * Sets on/off fullscreen visualization mode.\n//      */\n//     onToggleFullScreen = () => {\n//         const fullscreen = !this.state.fullscreen;\n\n//         this.setState({ fullscreen });\n//     };\n\n//     /**\n//      * Play stopped animations.\n//      */\n//     restartGraphSimulation = () => this.refs.graph.restartSimulation();\n\n//     /**\n//      * Pause ongoing animations.\n//      */\n//     pauseGraphSimulation = () => this.refs.graph.pauseSimulation();\n\n//     /**\n//      * If you have moved nodes you will have them restore theirs positions\n//      * when you call resetNodesPositions.\n//      */\n//     resetNodesPositions = () => this.refs.graph.resetNodesPositions();\n\n//     /**\n//      * Append a new node with some randomness.\n//      */\n//     onClickAddNode = () => {\n//         if (this.state.data.nodes && this.state.data.nodes.length) {\n//             const maxIndex = this.state.data.nodes.length - 1;\n//             const minIndex = 0;\n//             let i = Math.floor(Math.random() * (maxIndex - minIndex + 1) + minIndex);\n//             let nLinks = Math.floor(Math.random() * (5 - minIndex + 1) + minIndex);\n//             const newNode = `Node ${this.state.data.nodes.length}`;\n\n//             this.state.data.nodes.push({ id: newNode });\n\n//             while (this.state.data.nodes[i] && this.state.data.nodes[i].id && nLinks) {\n//                 this.state.data.links.push({\n//                     source: newNode,\n//                     target: this.state.data.nodes[i].id,\n//                 });\n\n//                 i++;\n//                 nLinks--;\n//             }\n\n//             this.setState({\n//                 data: this.state.data,\n//             });\n//         } else {\n//             // 1st node\n//             const data = {\n//                 nodes: [{ id: \"Node 1\" }],\n//                 links: [],\n//             };\n\n//             this.setState({ data });\n//         }\n//     };\n\n//     /**\n//      * Remove a node.\n//      */\n//     onClickRemoveNode = () => {\n//         if (this.state.data.nodes && this.state.data.nodes.length) {\n//             const id = this.state.data.nodes[0].id;\n\n//             this.state.data.nodes.splice(0, 1);\n//             const links = this.state.data.links.filter(l => l.source !== id && l.target !== id);\n//             const data = { nodes: this.state.data.nodes, links };\n\n//             this.setState({ data });\n//         } else {\n//             window.alert(\"No more nodes to remove!\");\n//         }\n//     };\n\n//     _buildGraphConfig = data => {\n//         let config = {};\n//         let schemaPropsValues = {};\n\n//         for (let k of Object.keys(data.formData)) {\n//             // Set value mapping correctly for config object of react-d3-graph\n//             utils.setValue(config, k, data.formData[k]);\n//             // Set new values for schema of jsonform\n//             schemaPropsValues[k] = {};\n//             schemaPropsValues[k][\"default\"] = data.formData[k];\n//         }\n\n//         return { config, schemaPropsValues };\n//     };\n\n//     refreshGraph = data => {\n//         const { config, schemaPropsValues } = this._buildGraphConfig(data);\n\n//         this.state.schema.properties = reactD3GraphUtils.merge(this.state.schema.properties, schemaPropsValues);\n\n//         this.setState({\n//             config,\n//         });\n//     };\n\n//     /**\n//      * Generate graph configuration file ready to use!\n//      */\n//     onSubmit = data => {\n//         const { config } = this._buildGraphConfig(data);\n\n//         this.setState({ generatedConfig: config });\n//     };\n\n//     onClickSubmit = () => {\n//         // Hack for allow submit button to live outside jsonform\n//         document.body.querySelector(\".invisible-button\").click();\n//     };\n\n//     resetGraphConfig = () => {\n//         const generatedConfig = {};\n\n//         const schemaProps = utils.generateFormSchema(defaultConfig, \"\", {});\n\n//         const schema = {\n//             type: \"object\",\n//             properties: schemaProps,\n//         };\n\n//         this.setState({\n//             config: defaultConfig,\n//             generatedConfig,\n//             schema,\n//         });\n//     };\n\n//     /**\n//      * This function decorates nodes and links with positions. The motivation\n//      * for this function its to set `config.staticGraph` to true on the first render\n//      * call, and to get nodes and links statically set to their initial positions.\n//      * @param  {Object} nodes nodes and links with minimalist structure.\n//      * @return {Object} the graph where now nodes containing (x,y) coords.\n//      */\n//     decorateGraphNodesWithInitialPositioning = nodes => {\n//         return nodes.map(n =>\n//             Object.assign({}, n, {\n//                 x: n.x || Math.floor(Math.random() * 500),\n//                 y: n.y || Math.floor(Math.random() * 500),\n//             })\n//         );\n//     };\n\n//     /**\n//      * Update graph data each time an update is triggered\n//      * by JsonTree\n//      * @param {Object} data update graph data (nodes and links)\n//      */\n//     onGraphDataUpdate = data => this.setState({ data });\n\n//     /**\n//      * Build common piece of the interface that contains some interactions such as\n//      * fullscreen, play/pause, + and - buttons.\n//      */\n//     buildCommonInteractionsPanel = () => {\n//         const btnStyle = {\n//             cursor: this.state.config.staticGraph ? \"not-allowed\" : \"pointer\",\n//         };\n\n//         const fullscreen = this.state.fullscreen ? (\n//             <span className=\"cross-icon\" onClick={this.onToggleFullScreen}>\n//                 ❌\n//             </span>\n//         ) : (\n//             <button onClick={this.onToggleFullScreen} className=\"btn btn-default btn-margin-left\">\n//                 Fullscreen\n//             </button>\n//         );\n\n//         return (\n//             <div>\n//                 {fullscreen}\n//                 <button\n//                     onClick={this.restartGraphSimulation}\n//                     className=\"btn btn-default btn-margin-left\"\n//                     style={btnStyle}\n//                     disabled={this.state.config.staticGraph}\n//                 >\n//                     ▶️\n//                 </button>\n//                 <button\n//                     onClick={this.pauseGraphSimulation}\n//                     className=\"btn btn-default btn-margin-left\"\n//                     style={btnStyle}\n//                     disabled={this.state.config.staticGraph}\n//                 >\n//                     ⏸️\n//                 </button>\n//                 <button\n//                     onClick={this.resetNodesPositions}\n//                     className=\"btn btn-default btn-margin-left\"\n//                     style={btnStyle}\n//                     disabled={this.state.config.staticGraph}\n//                 >\n//                     Unstick nodes\n//                 </button>\n//                 <button onClick={this.onClickAddNode} className=\"btn btn-default btn-margin-left\">\n//                     +\n//                 </button>\n//                 <button onClick={this.onClickRemoveNode} className=\"btn btn-default btn-margin-left\">\n//                     -\n//                 </button>\n//                 <span className=\"container__graph-info\">\n//                     <b>Nodes: </b> {this.state.data.nodes.length} | <b>Links: </b> {this.state.data.links.length}\n//                 </span>\n//             </div>\n//         );\n//     };\n\n//     render() {\n//         // This does not happens in this sandbox scenario running time, but if we set staticGraph config\n//         // to true in the constructor we will provide nodes with initial positions\n//         const data = {\n//             nodes: this.decorateGraphNodesWithInitialPositioning(this.state.data.nodes),\n//             links: this.state.data.links,\n//             focusedNodeId: this.state.data.focusedNodeId,\n//         };\n\n//         const graphProps = {\n//             id: \"graph\",\n//             data,\n//             config: this.state.config,\n//             onClickNode: this.onClickNode,\n//             onDoubleClickNode: this.onDoubleClickNode,\n//             onRightClickNode: this.onRightClickNode,\n//             onClickGraph: this.onClickGraph,\n//             onClickLink: this.onClickLink,\n//             onRightClickLink: this.onRightClickLink,\n//             onMouseOverNode: this.onMouseOverNode,\n//             onMouseOutNode: this.onMouseOutNode,\n//             onMouseOverLink: this.onMouseOverLink,\n//             onMouseOutLink: this.onMouseOutLink,\n//         };\n\n//         if (this.state.fullscreen) {\n//             graphProps.config = Object.assign({}, graphProps.config, {\n//                 height: window.innerHeight,\n//                 width: window.innerWidth,\n//             });\n\n//             return (\n//                 <div>\n//                     {this.buildCommonInteractionsPanel()}\n//                     <Graph ref=\"graph\" {...graphProps} />\n//                 </div>\n//             );\n//         } else {\n//             // @TODO: Only show configs that differ from default ones in \"Your config\" box\n//             return (\n//                 <div className=\"container\">\n//                     <div className=\"container__graph\">\n//                         {this.buildCommonInteractionsPanel()}\n//                         <div className=\"container__graph-area\">\n//                             <Graph ref=\"graph\" {...graphProps} />\n//                         </div>\n//                     </div>\n//                     <div className=\"container__form\">\n//                         <h4>\n//                             <a href=\"https://github.com/danielcaldas/react-d3-graph\" target=\"_blank\">\n//                                 react-d3-graph\n//                             </a>\n//                         </h4>\n//                         <h4>\n//                             <a href=\"https://danielcaldas.github.io/react-d3-graph/docs/index.html\" target=\"_blank\">\n//                                 docs\n//                             </a>\n//                         </h4>\n//                         <h3>Configurations</h3>\n//                         <Form\n//                             className=\"form-wrapper\"\n//                             schema={this.state.schema}\n//                             uiSchema={this.uiSchema}\n//                             onChange={this.refreshGraph}\n//                             onSubmit={this.onSubmit}\n//                         >\n//                             <button className=\"invisible-button\" type=\"submit\" />\n//                         </Form>\n//                         <button className=\"submit-button btn btn-primary\" onClick={this.onClickSubmit}>\n//                             Generate config\n//                         </button>\n//                         <button className=\"reset-button btn btn-danger\" onClick={this.resetGraphConfig}>\n//                             Reset config\n//                         </button>\n//                     </div>\n//                     <div className=\"container__graph-config\">\n//                         <h4>Your config</h4>\n//                         <JSONContainer data={this.state.generatedConfig} staticData={false} />\n//                     </div>\n//                     <div className=\"container__graph-data\">\n//                         <h4>\n//                             Graph Data <small>(editable)</small>\n//                         </h4>\n//                         <div className=\"json-data-container\">\n//                             <JsonTree data={this.state.data} onFullyUpdate={this.onGraphDataUpdate} />\n//                         </div>\n//                     </div>\n//                 </div>\n//             );\n//         }\n//     }\n// }"]},"metadata":{},"sourceType":"module"}