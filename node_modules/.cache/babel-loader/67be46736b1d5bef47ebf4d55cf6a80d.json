{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.renderGraph = undefined;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n/**\n * @module Graph/renderer\n * @description\n * Offers a series of methods that isolate render logic for Graph component.\n */\n\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _graph = require(\"./graph.const\");\n\nvar _graph2 = _interopRequireDefault(_graph);\n\nvar _marker = require(\"../marker/marker.const\");\n\nvar _Link = require(\"../link/Link\");\n\nvar _Link2 = _interopRequireDefault(_Link);\n\nvar _Node = require(\"../node/Node\");\n\nvar _Node2 = _interopRequireDefault(_Node);\n\nvar _Marker = require(\"../marker/Marker\");\n\nvar _Marker2 = _interopRequireDefault(_Marker);\n\nvar _graph3 = require(\"./graph.builder\");\n\nvar _collapse = require(\"./collapse.helper\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Build Link components given a list of links.\n * @param  {Object.<string, Object>} nodes - same as {@link #graphrenderer|nodes in renderGraph}.\n * @param  {Array.<Object>} links - array of links {@link #Link|Link}.\n * @param  {Array.<Object>} linksMatrix - array of links {@link #Link|Link}.\n * @param  {Object} config - same as {@link #graphrenderer|config in renderGraph}.\n * @param  {Function[]} linkCallbacks - same as {@link #graphrenderer|linkCallbacks in renderGraph}.\n * @param  {string} highlightedNode - same as {@link #graphrenderer|highlightedNode in renderGraph}.\n * @param  {Object} highlightedLink - same as {@link #graphrenderer|highlightedLink in renderGraph}.\n * @param  {number} transform - value that indicates the amount of zoom transformation.\n * @returns {Array.<Object>} returns the generated array of Link components.\n * @memberof Graph/renderer\n */\n\n\nfunction _renderLinks(nodes, links, linksMatrix, config, linkCallbacks, highlightedNode, highlightedLink, transform) {\n  var outLinks = links;\n\n  if (config.collapsible) {\n    outLinks = outLinks.filter(function (_ref) {\n      var isHidden = _ref.isHidden;\n      return !isHidden;\n    });\n  }\n\n  return outLinks.map(function (link) {\n    var source = link.source,\n        target = link.target; // FIXME: solve this source data inconsistency later\n\n    var sourceId = source.id !== undefined && source.id !== null ? source.id : source;\n    var targetId = target.id !== undefined && target.id !== null ? target.id : target;\n    var key = \"\" + sourceId + _graph2.default.COORDS_SEPARATOR + targetId;\n    var props = (0, _graph3.buildLinkProps)(_extends({}, link, {\n      source: \"\" + sourceId,\n      target: \"\" + targetId\n    }), nodes, linksMatrix, config, linkCallbacks, \"\" + highlightedNode, highlightedLink, transform);\n    return _react2.default.createElement(_Link2.default, _extends({\n      key: key,\n      id: key\n    }, props));\n  });\n}\n/**\n * Function that builds Node components.\n * @param  {Object.<string, Object>} nodes - an object containing all nodes mapped by their id.\n * @param  {Function[]} nodeCallbacks - array of callbacks for used defined event handler for node interactions.\n * @param  {Object} config - an object containing rd3g consumer defined configurations {@link #config config} for the graph.\n * @param  {string} highlightedNode - this value contains a string that represents the some currently highlighted node.\n * @param  {Object} highlightedLink - this object contains a source and target property for a link that is highlighted at some point in time.\n * @param  {string} highlightedLink.source - id of source node for highlighted link.\n * @param  {string} highlightedLink.target - id of target node for highlighted link.\n * @param  {number} transform - value that indicates the amount of zoom transformation.\n * @param  {Object.<string, Object>} linksMatrix - the matrix of connections of the graph\n * @returns {Array.<Object>} returns the generated array of node components\n * @memberof Graph/renderer\n */\n\n\nfunction _renderNodes(nodes, nodeCallbacks, config, highlightedNode, highlightedLink, transform, linksMatrix) {\n  var outNodes = Object.keys(nodes);\n\n  if (config.collapsible) {\n    outNodes = outNodes.filter(function (nodeId) {\n      return (0, _collapse.isNodeVisible)(nodeId, nodes, linksMatrix);\n    });\n  }\n\n  return outNodes.map(function (nodeId) {\n    var props = (0, _graph3.buildNodeProps)(Object.assign({}, nodes[nodeId], {\n      id: \"\" + nodeId\n    }), config, nodeCallbacks, highlightedNode, highlightedLink, transform);\n    return _react2.default.createElement(_Node2.default, _extends({\n      key: nodeId\n    }, props));\n  });\n}\n/**\n * Builds graph defs (for now markers, but we could also have gradients for instance).\n * NOTE: defs are static svg graphical objects, thus we only need to render them once, the result\n * is cached on the 1st call and from there we simply return the cached jsx.\n * @returns {Function} memoized build definitions function.\n * @memberof Graph/renderer\n */\n\n\nfunction _renderDefs() {\n  var cachedDefs = void 0;\n  return function (config) {\n    if (cachedDefs) {\n      return cachedDefs;\n    }\n\n    var small = _marker.MARKER_SMALL_SIZE;\n    var medium = small + _marker.MARKER_MEDIUM_OFFSET * config.maxZoom / 3;\n    var large = small + _marker.MARKER_LARGE_OFFSET * config.maxZoom / 3;\n    cachedDefs = _react2.default.createElement(\"defs\", null, _react2.default.createElement(_Marker2.default, {\n      id: _marker.MARKERS.MARKER_S,\n      refX: small,\n      fill: config.link.color\n    }), _react2.default.createElement(_Marker2.default, {\n      id: _marker.MARKERS.MARKER_SH,\n      refX: small,\n      fill: config.link.highlightColor\n    }), _react2.default.createElement(_Marker2.default, {\n      id: _marker.MARKERS.MARKER_M,\n      refX: medium,\n      fill: config.link.color\n    }), _react2.default.createElement(_Marker2.default, {\n      id: _marker.MARKERS.MARKER_MH,\n      refX: medium,\n      fill: config.link.highlightColor\n    }), _react2.default.createElement(_Marker2.default, {\n      id: _marker.MARKERS.MARKER_L,\n      refX: large,\n      fill: config.link.color\n    }), _react2.default.createElement(_Marker2.default, {\n      id: _marker.MARKERS.MARKER_LH,\n      refX: large,\n      fill: config.link.highlightColor\n    }));\n    return cachedDefs;\n  };\n}\n/**\n * Memoized reference for _renderDefs.\n * @param  {Object} config - an object containing rd3g consumer defined configurations {@link #config config} for the graph.\n * @returns {Object} graph reusable objects [defs](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/defs).\n * @memberof Graph/renderer\n */\n\n\nvar _memoizedRenderDefs = _renderDefs();\n/**\n * Method that actually is exported an consumed by Graph component in order to build all Nodes and Link\n * components.\n * @param  {Object.<string, Object>} nodes - an object containing all nodes mapped by their id.\n * @param  {Function[]} nodeCallbacks - array of callbacks for used defined event handler for node interactions.\n * @param  {Array.<Object>} links - array of links {@link #Link|Link}.\n * @param  {Object.<string, Object>} linksMatrix - an object containing a matrix of connections of the graph, for each nodeId,\n * there is an Object that maps adjacent nodes ids (string) and their values (number).\n * ```javascript\n *  // links example\n *  {\n *     \"Androsynth\": {\n *         \"Chenjesu\": 1,\n *         \"Ilwrath\": 1,\n *         \"Mycon\": 1,\n *         \"Spathi\": 1,\n *         \"Umgah\": 1,\n *         \"VUX\": 1,\n *         \"Guardian\": 1\n *     },\n *     \"Chenjesu\": {\n *         \"Androsynth\": 1,\n *         \"Mycon\": 1,\n *         \"Spathi\": 1,\n *         \"Umgah\": 1,\n *         \"VUX\": 1,\n *         \"Broodhmome\": 1\n *     },\n *     ...\n *  }\n * ```\n * @param  {Function[]} linkCallbacks - array of callbacks for used defined event handler for link interactions.\n * @param  {Object} config - an object containing rd3g consumer defined configurations {@link #config config} for the graph.\n * @param  {string} highlightedNode - this value contains a string that represents the some currently highlighted node.\n * @param  {Object} highlightedLink - this object contains a source and target property for a link that is highlighted at some point in time.\n * @param  {string} highlightedLink.source - id of source node for highlighted link.\n * @param  {string} highlightedLink.target - id of target node for highlighted link.\n * @param  {number} transform - value that indicates the amount of zoom transformation.\n * @returns {Object} returns an object containing the generated nodes and links that form the graph.\n * @memberof Graph/renderer\n */\n\n\nfunction renderGraph(nodes, nodeCallbacks, links, linksMatrix, linkCallbacks, config, highlightedNode, highlightedLink, transform) {\n  return {\n    nodes: _renderNodes(nodes, nodeCallbacks, config, highlightedNode, highlightedLink, transform, linksMatrix),\n    links: _renderLinks(nodes, links, linksMatrix, config, linkCallbacks, highlightedNode, highlightedLink, transform),\n    defs: _memoizedRenderDefs(config)\n  };\n}\n\nexports.renderGraph = renderGraph;","map":null,"metadata":{},"sourceType":"script"}